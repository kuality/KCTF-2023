#!/usr/bin/python3
from flask import Flask, request, render_template
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
import urllib
import os

app = Flask(__name__)
app.secret_key = os.urandom(32)

def read_url(url, cookie={"name": "name", "value": "value"}):
    cookie.update({"domain": "127.0.0.1"})
    try:
        options = webdriver.ChromeOptions()
        for _ in [
            "headless",
            "window-size=1920x1080",
            "disable-gpu",
            "no-sandbox",
            "disable-dev-shm-usage",
        ]:
            options.add_argument(_)
        driver = webdriver.Chrome(options=options)
        driver.implicitly_wait(3)
        driver.set_page_load_timeout(3)
        driver.get("http://127.0.0.1:5000/")
        driver.add_cookie(cookie)
        print("url : ", url)
        driver.get(url)
    except Exception as e:
        print(e)
        driver.quit()
        return False
    driver.quit()
    return True

def check_xss(detail, cookie={"name": "name", "value": "value"}):
    url = f"http://127.0.0.1:5000/report?detail={urllib.parse.quote(detail)}"
    return read_url(url, cookie)

def xss_filter(text):
    _filter = ["script", "javascript", "on", "window", "self", "this", "document", "location", "(", ")", "&#"]
    for f in _filter:
        if f in text.lower():
            return "Don't attack us!!!!"

    return text

@app.route("/")
def index():
    return render_template('index.html')


@app.route("/report")
def report():
    detail = request.args.get('detail')
    detail = xss_filter(detail)
    return detail


@app.route("/reportpage", methods=["GET", "POST"])
def flag():
    if request.method == "GET":
        return render_template('reportpage.html')
    elif request.method == "POST":
        detail = request.form.get('detail')
        if not check_xss(detail, {"name": "flag", "value": "KCTF{Th4nk_y0u_for_y0ur_r3p0rt!}"}):
            return '<script>alert("wrong;");history.go(-1);</script>'
        
        return '<script>alert("Thank you for your report");history.go(-1);</script>'

previous_note = {}

@app.route("/record")
def previous_report():
    global previous_note
    text = request.args.get("detail", "")
    ip = request.args.get("ipaddr", None)
    print("text : ", text)
    print("ip :" , ip)
    if ip:
        if previous_note.get(ip) == None:
            previous_note[ip] = ""

        previous_note[ip] += text + "\n"
        return render_template("record.html", previous_detail = previous_note[ip])
    else:
        if previous_note.get(request.remote_addr) == None:
            previous_note[request.remote_addr] = ""
        
        previous_note[request.remote_addr] += text + "\n"

        return render_template("record.html", previous_detail = previous_note[request.remote_addr])

app.run(host="0.0.0.0", port=5000, debug=True)
